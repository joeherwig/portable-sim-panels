<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   id="svg4517"
   width="150"
   height="50"
   viewBox="0 0 150 50"
   version="1.1"
   sodipodi:docname="Garmin-generic-line-single-horizontal.svg"
   inkscape:version="0.92.1 r15371">
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="2400"
     inkscape:window-height="1271"
     id="namedview13"
     showgrid="false"
     inkscape:zoom="1.2930675"
     inkscape:cx="127.55917"
     inkscape:cy="-130.3344"
     inkscape:window-x="3191"
     inkscape:window-y="-9"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg4517" />
  <defs
     id="defs17121">
    <script
       xlink:href="../libs/d3.3.min.js"
       id="script9" />
    <script xlink:href="../libs/findSuitablePanel.js"/>

    <script
       id="businesslogic"
       type="text/javascript"><![CDATA[

        window.parent.addEventListener("update", eventHandler, true);
        function isset (fn) {
            var value;
            try {
                value = fn();
            } catch (e) {
                value = undefined;
            } finally {
                return value !== undefined;
            }
        };

        function eventHandler(update) {
          Update(update.detail);
        }

        let config = {},
          pi = Math.PI,
          stepwidth,
          fullrange,
          zeroposition,
          calculatedValue,
          baseColor,
          id = window.frameElement.id;
        var path = window.parent.location.pathname.split('/');
        path.pop();
        path = path.join("/") + "/";
        fetchAsync(window.parent.location.pathname + '/config.json')
          .then(data => {
            config = data[window.frameElement.id];
            return true;
          })
          .catch(reason => console.log("Error in config.json:\n" + reason))

        function init(){
          label = isset(() => config.label) ? config.label : ''
          rangeMin = isset(() => config.rangemin) ? config.rangemin : 0
          rangeMax = isset(() => config.rangemax) ? config.rangemax : 100
          fullrange = rangeMax - rangeMin;
          stepwidth = 150 / fullrange;
          zeroposition = rangeMin * stepwidth * -1;
          calculatedValue = isset(() => config.calculatedValue) ? config.calculatedValue : false
          baseColor = isset(() => config.baseStyle.baseColor) ? config.baseStyle.baseColor : "#333333"
          normalColor = isset(() => config.baseStyle.normalColor) ? config.baseStyle.normalColor : "white"
          rulerwidth = isset(() => config.baseStyle.rulerwidth) ? config.baseStyle.rulerwidth : "3px"
          rulercolor = baseColor;


          let svg = d3.select("svg")
          d3.select('#label').text(label);

          if (isset(() => config.ranges)) {
            config.ranges.forEach(function(range, i) {
              let rangemin = (range.minValue * stepwidth) + zeroposition;
              let rangemax =  (range.maxValue * stepwidth) + zeroposition;
              svg.append("rect")
                .attr("class", 'range-' + i)
                .attr("fill", range.color)
                .attr("x", rangemin)
                .attr("y", 48 - range.width)
                .attr("width", rangemax - rangemin)
                .attr("height", range.width);
            })
          }
          svg.append("rect")
              .attr("class", "ruler")
              .attr("fill", baseColor)
              .attr("x", 0)
              .attr("y", 48)
              .attr("width", 150)
              .attr("height", rulerwidth);
          svg.append("rect")
              .attr("class", "rulerBarStart")
              .attr("fill", baseColor)
              .attr("x", 0)
              .attr("y", 33)
              .attr("width", rulerwidth)
              .attr("height", 15);
          svg.append("rect")
              .attr("class", "rulerBarEnd")
              .attr("fill", baseColor)
              .attr("x", 150 - rulerwidth)
              .attr("y", 33)
              .attr("width", rulerwidth)
              .attr("height", 15);
          svg.append("path")
              .attr("class", "needle")
              .attr("id", "needle")
              .attr("fill", "white")
              .attr("stroke", "black")
              .attr("stroke-width", "2px")
              .attr("d", "M -10,30 0,45 10,30 Z")
              .attr("inkscape:connector-curvature", 33);
          d3.select(".ruler").attr("fill",rulercolor);
          d3.select(".rulerBarStart").attr("fill",rulercolor);
          d3.select(".rulerBarEnd").attr("fill",rulercolor);
        }

        function Update(inputObject){
          obj = inputObject;
          for(let attr = 0; attr < Object.keys(inputObject).length; attr++){
            let key = Object.keys(inputObject)[attr];
            let value = Object.values(inputObject)[attr];

            switch (key) {
              case id:
                value = (/^\-?\d.*\.*\d$/.test(value) && calculatedValue) ? eval(calculatedValue.replace("x",value)) : value;
                position = (value * stepwidth) + zeroposition;
                d3.select('#needle').attr('transform', 'translate(' + position + ', 0)');

                if (stepwidth >= 2.5) {
                  d3.select('#value').text(value.toFixed(1));
                } else {
                  d3.select('#value').text(Math.round(value));
                }
                rulercolor = baseColor;

                if (config.ranges) {
                  config.ranges.forEach(function(range, i) {
                    let rangemin = zeroposition + range.minValue * stepwidth;
                    let rangemax =  zeroposition + range.maxValue * stepwidth;
                    let range2 = d3.select(".range-"+i);
                    if(value > range.minValue && value <= range.maxValue && range.alerttype) {
                      range2.attr("height", range.activewidth);
                      range2.attr("y", 48 - range.activewidth);
                      rulercolor = range.color;
                    } else {
                      range2.attr("height", range.width);
                      range2.attr("y", 48 - range.width);
                    };
                    d3.select(".ruler").attr("fill",rulercolor);
                    d3.select(".rulerBarStart").attr("fill",rulercolor);
                    d3.select(".rulerBarEnd").attr("fill",rulercolor);
                  })
                }
                break;

              case 'test':
                let x = value.x;
                let y = value.y;
                Update({
                  "ELEVATOR_TRIM_POSITION":(x/3),
                  "ELEVATOR_TRIM_POSITION2":(x/3),
                  "Plane_Bank_Degrees":(x/3),
                  "Plane_Pitch_Degrees":(y/10),
                  "Autopilot_Altitude_Lock_Var":Math.abs(y*x*2),
                  "Plane_Heading_Degrees_True":x,
                  "Airspeed_Indicated": y*-1,
                  "Plane_Altitude":x*y*-1,
                  "GPS_GROUND_SPEED":y*-1.04/1.94384,
                  "INCIDENCE_BETA":y/1.5,
                  "GENERAL_ENG_RPM_1": x,
                  "ENG_MANIFOLD_PRESSURE_1": x/2.2,
                  "ENG_MANIFOLD_PRESSURE_2": x/2,
                  "Gear_Position": y/4,
                  "FLAPS_HANDLE_PERCENT": x/4,
                  "Vertical_Speed": x*6,
                  "GPH": x/3,
                  "GPH2": y/-3,
                  "GPH3": y/-3
                });
                break;

              default:
                //console.log('       :-(    Attribute '+key+' not relevant for this element... Ignoring');
            };
          }
        }

        ]]></script>
  </defs>
  <metadata
     id="metadata17124">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <text
     xml:space="preserve"
     style="font-weight:bold;font-stretch:normal;font-size:24px;line-height:0%;font-family:'DejaVu Sans';-inkscape-font-specification:'DejaVu Sans, Bold';text-align:end;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:end;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
     x="147"
     y="20"
     id="value"><tspan
       id="tspan4144"
       style="font-size:22.5px;fill:#ffffff">0000</tspan></text>
  <text
     xml:space="preserve"
     style="font-weight:bold;font-size:16px;line-height:0%;font-family:'DejaVu Sans';-inkscape-font-specification:'DejaVu Sans, Bold';text-align:start;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
     x="3"
     y="20"
     id="label"><tspan
       id="tspan4144-6"
       style="font-size:17.5px;fill:#cccccc">label</tspan></text>
</svg>
